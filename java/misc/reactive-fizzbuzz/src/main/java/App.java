import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.reactivex.schedulers.Schedulers;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static String fizzbuzz(int num){
        if(num % 15 == 0){
            return "FizzBuzz";
        }

        if(num % 5 == 0) {
            return "Buzz";
        }

        if(num % 3 == 0) {
            return "Fizz";
        }

        return Integer.toString(num);
    }

    public static void main(String[] args) throws InterruptedException{
        System.out.println("Reactive Hello World");
        Observable.just("Hello RxJava and Reactive Programming with Observable").subscribe(System.out::println);
        Flowable.just("Hello RxJava and Reactive Programming with Flowable").subscribe(System.out::println);
        System.out.println("=============");
        System.out.println("Some fake work done in the background");
        Flowable.fromCallable(() -> {
            Thread.sleep(1000);
            return "Done";
        })
                .subscribeOn(Schedulers.io())
                .observeOn(Schedulers.single())
                .subscribe(System.out::println,Throwable::printStackTrace);
        Thread.sleep(2000);
        System.out.println("=============");
        System.out.println("Processing numbers sequentially");
        Flowable.range(1,10)
                .observeOn(Schedulers.computation())
                .map(n -> n * n)
                .blockingSubscribe(System.out::println);
        System.out.println("=============");
        System.out.println("Processing numbers in parallel with flatMap");
        Flowable.range(1,10)
                .flatMap( v ->
                Flowable.just(v).subscribeOn(Schedulers.computation()).map(n -> n * n * n)
        ).blockingSubscribe(System.out::println);
        System.out.println("=============");
        System.out.println("Processing numbers in parallel with parallel");
        Flowable.range(1,10).parallel().runOn(Schedulers.computation()).map(x -> x * x * x * x)
                .sequential().blockingSubscribe(System.out::println);
        System.out.println("=============");
        System.out.println("In premier FizzBuzz qui ne fera pas le buzz");
        Flowable.range(1,30).map(App::fizzbuzz).subscribe(System.out::println);
    }
}
